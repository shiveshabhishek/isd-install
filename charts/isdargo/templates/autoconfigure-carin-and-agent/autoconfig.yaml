{{- if or .Values.autoconfigurecarina .Values.autoconfigureagent }}
{{- if and (eq .Values.installationMode "OEA-AP") (.Values.installArgoCD) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: oes-autoconfigure
  labels:
{{ include "oes.standard-labels" . | indent 4 }}
data:
  datasource-api.sh: |-
    #!/bin/bash
    #set -x
    echo "Waiting for all Argo Server  to come-up"
    cat << 'EOF' >> /tmp/agent-secret.yaml
    apiVersion: v1
    kind: Secret
    metadata:
      name: opsmx-services-isd-argo-agent
      labels:
        agent.opsmx.com/name: isd-argo-agent
        agent.opsmx.com/role: agent
    stringData:
      services.yaml: |
        outgoingServices:
          - name: {{ .Values.cdagentname }}
            type: argocd
            enabled: true
            config:
              url: http://{{ .Release.Name }}-argocd-server:80
              insecure: true
              credentials:
                type: bearer
                token: xxxx
            annotations:
              description: argocd via agent
              {{- if and (.Values.global.createIngress) (.Values.global.certManager.installed) }}
              uiUrl: https://{{ .Values.global.argocd.host }}
              {{- else }}
              {{- if and (.Values.global.createIngress) (not .Values.global.certManager.installed) }}
              uiUrl: http://{{ .Values.global.argocd.host }}
              {{- else }}
              uiUrl: http://localhost:8099
              {{- end }}
              {{- end }}
          - name: {{ .Values.cdagentname }}
            type: carinainstance
            enabled: true
            config:
              url: http://carina-instance:8090
    EOF
    wait_period=0
    while true
    do
    {{- if and (.Values.global.createIngress) (.Values.global.certManager.installed) }}
    status="$(curl -Is https://{{ .Values.global.argocd.host }} | head -1)"
    validate=$(echo $status | awk '{print $2}')
    {{- else }}
    {{- if and (.Values.global.createIngress) (not .Values.global.certManager.installed) }}
    status="$(curl -Is http://{{ .Values.global.argocd.host }} | head -1)"
    validate=$(echo $status | awk '{print $2}')
    {{- else }}
    validate=$(echo "200")
    {{- end }}
    {{- end }}
    kubectl get po -n {{ .Release.Namespace }} -o jsonpath='{range .items[*]}{..metadata.name}{"\t"}{..containerStatuses..ready}{"\n"}{end}' > /tmp/live.status
    ARGOCDSERVER=$(grep argocd-server /tmp/live.status |grep -v deck | awk '{print $2}')
    OESSAPOR=$(grep oes-sapor /tmp/live.status | awk '{print $2}')
    OESGATE=$(grep oes-gate /tmp/live.status | awk '{print $2}')
    OESUI=$(grep oes-ui /tmp/live.status | awk '{print $2}')
    OESPLATFORM=$(grep oes-platform /tmp/live.status | awk '{print $2}')
    CONTROLLER=$(grep opsmx-controller /tmp/live.status | awk '{print $2}')
    {{- if and (.Values.global.enableCentralMonitoring) (.Values.enableCentralLogging) }}
    ELASTICSEARCH=$(grep elasticsearch-master-0 /tmp/live.status | awk '{print $2}')
    #KIBANA=$(grep kibana /tmp/live.status | awk '{print $2}')
    PROMETHEUS=$(grep prometheus-server /tmp/live.status | awk '{print $2}')
    {{- else if .Values.global.enableCentralMonitoring }}
    PROMETHEUS=$(grep prometheus-server /tmp/live.status | awk '{print $2}')
    {{- else if .Values.enableCentralLogging }}
    ELASTICSEARCH=$(grep elasticsearch-master-0 /tmp/live.status | awk '{print $2}')
    #KIBANA=$(grep kibana /tmp/live.status | awk '{print $2}')
    {{- end }}
    wait_period=$(($wait_period+10))
    {{- if and (.Values.global.enableCentralMonitoring) (.Values.enableCentralLogging) }}
      if [ "$ELASTICSEARCH" == "true" ] && [ "$PROMETHEUS" == "true" ] && [ "$OESPLATFORM" == "true" ] && [ "$OESUI" == "true" ] && [ "$OESGATE" == "true" ] && [ "$ARGOCDSERVER" == "true" ] && [ "$validate" == "200" ] && [ "$OESSAPOR" == "true" ];
    {{- else if .Values.enableCentralLogging }}
      if [ "$ELASTICSEARCH" == "true" ] && [ "$OESPLATFORM" == "true" ] && [ "$OESUI" == "true" ] && [ "$OESGATE" == "true" ] && [ "$ARGOCDSERVER" == "true" ] && [ "$validate" == "200" ] && [ "$OESSAPOR" == "true" ];
    {{- else if .Values.global.enableCentralMonitoring }}
      if [ "$PROMETHEUS" == "true" ] && [ "$OESPLATFORM" == "true" ] && [ "$OESUI" == "true" ] && [ "$OESGATE" == "true" ] && [ "$ARGOCDSERVER" == "true" ] && [ "$validate" == "200" ] && [ "$OESSAPOR" == "true" ];
    {{- else }}
      if  [ "$OESPLATFORM" == "true" ] && [ "$OESUI" == "true" ] && [ "$OESGATE" == "true" ] && [ "$ARGOCDSERVER" == "true" ] && [ "$validate" == "200" ] && [ "$OESSAPOR" == "true" ] && [ "$CONTROLLER" == "true" ];
    {{- end }}
    then
      echo "ArgocdServer is  Up and Ready.."
      while true
      do
      ## install argoCLI
      curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
      chmod +x /usr/local/bin/argocd
      ## get the user password
      argopassword=$(kubectl get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)

      ##argocli login
      {{- if and (.Values.global.createIngress) (.Values.global.certManager.installed) }}
      argocd login {{ .Values.global.argocd.host }} --username=admin --password=$argopassword --grpc-web > /dev/null
      {{- else }}
      {{- if and (.Values.global.createIngress) (not .Values.global.certManager.installed) }}
      argocd login {{ .Values.global.argocd.host }} --username=admin --password=$argopassword --grpc-web --insecure > /dev/null
      {{- else }}
      argocd login --insecure --port-forward --port-forward-namespace={{ .Release.Namespace }} --plaintext --username=admin --password=$argopassword > /dev/null
      {{- end }}
      {{- end }}

      {{- if and (.Values.global.createIngress) (.Values.global.certManager.installed) }}
      token=$(argocd account generate-token)
      {{- else }}
      {{- if and (.Values.global.createIngress) (not .Values.global.certManager.installed) }}
      token=$(argocd account generate-token --insecure)
      {{- else }}
      token=$(argocd account generate-token --insecure --port-forward --port-forward-namespace={{ .Release.Namespace }})
      {{- end }}
      {{- end }}
      wait=0
      if [ -z $token ]
      then
        wait=$(($wait+10))
        if [ $wait -gt 2000 ];
        then
          echo "Script is timed out Admin Secret not found ......."
          break
        else
          echo "Waiting to get the admin token"
          sleep 1m
        fi

      else
         encodedtoken=$(echo -n $token | base64 -w0)
         {{- if .Values.autoconfigurecarina }}
         ## autoconfiguration for carina with isd
         ## replace the secret
         kubectl get secret oes-carina-config -o jsonpath='{.data.*}' | base64 -d > carina-secret.yaml
         yq e '.argos.[].token = "'$encodedtoken'"' carina-secret.yaml > carina-manager.yaml
         kubectl delete secret oes-carina-config
         kubectl create secret generic oes-carina-config  --from-file=carina-manager.yaml
         kubectl delete  po -l component=carina
         break
         {{- end }}
         {{- if .Values.autoconfigureagent }}
         {{- if and (.Values.global.enableCentralMonitoring) (.Values.enableCentralLogging) }}
         ### Create Datasource
       ## create Elasticsearch datasource
       curl -s --location --request POST 'http://oes-platform:8095/platformservice/v6/datasource' \
       --header 'Content-Type: application/json' \
       --data-raw '{"datasourceType":"ELASTICSEARCH","name":"opsmx-elastic","configurationFields":{"endPoint":"http://elasticsearch-master:9200","username":"","password":"","kibanaEndPoint":"","kibanaUsername":"","kibanaPassword":""}}'
       ## Create prometheus datasource
       curl -s --location --request POST 'http://oes-platform:8095/platformservice/v6/datasource' \
       --header 'Content-Type: application/json' \
       --data-raw '{"datasourceType":"PROMETHEUS","name":"opsmx-prom","configurationFields":{"endPoint":"http://{{ .Release.Name }}-prometheus-server:80","username":"","password":""}}'
         sleep 10
         ## create LOG template
       curl -s --location --header "x-spinnaker-user:admin"  --request POST 'http://oes-autopilot:8090/autopilot/api/v5/global/logTemplate' \
       --header 'Content-Type: application/json' \
       --data-raw '{"templateName":"opsmx-logtemplate","monitoringProvider":"ELASTICSEARCH","scoringAlgorithm":"Canary","accountName":"opsmx-elasticsearch","index":"test_*","namespace":null,"regExFilter":false,"regExResponseKey":"","regularExpression":"","filterKey":"kubernetes.container_name","autoBaseline":false,"sensitivity":"high","tags":[],"errorTopics":[{"string":"OnOutOfMemoryError","topic":"CRITICAL","type":"default"},{"string":"StackOverflowError","topic":"CRITICAL","type":"default"},{"string":"ClassNotFoundException","topic":"CRITICAL","type":"default"},{"string":"FileNotFoundException","topic":"CRITICAL","type":"default"},{"string":"ArrayIndexOutOfBounds","topic":"CRITICAL","type":"default"},{"string":"NullPointerException","topic":"CRITICAL","type":"default"},{"string":"StringIndexOutOfBoundsException","topic":"CRITICAL","type":"default"},{"string":"FATAL","topic":"CRITICAL","type":"default"},{"string":"SEVERE","topic":"CRITICAL","type":"default"},{"string":"NoClassDefFoundError","topic":"ERROR","type":"default"},{"string":"NoSuchMethodFoundError","topic":"ERROR","type":"default"},{"string":"NumberFormatException","topic":"ERROR","type":"default"},{"string":"IllegalArgumentException","topic":"ERROR","type":"default"},{"string":"ParseException","topic":"ERROR","type":"default"},{"string":"SQLException","topic":"ERROR","type":"default"},{"string":"ArithmeticException","topic":"ERROR","type":"default"},{"string":"status=404","topic":"ERROR","type":"default"},{"string":"status=500","topic":"ERROR","type":"default"},{"string":"EXCEPTION","topic":"ERROR","type":"default"},{"string":"ERROR","topic":"ERROR","type":"default"},{"string":"WARN","topic":"WARN","type":"default"},{"string":"WARNING","topic":"WARN","type":"default"}],"responseKeywords":"log,message","logGroupName":"","logStreamName":"","region":"","verificationType":"VERIFICATION","testCaseKey":"","testSuiteKey":"","infoScoring":false,"contextualCluster":false,"contextualWindowSize":25,"tagEnabled":false,"streamId":"","timestampKey":"","applicationId":0,"applicationName":"","emailId":"","versionNo":"v1.0"}' > /dev/null
        # create metric template
       curl -s --location --request POST 'http://oes-autopilot:8090/autopilot/api/v5/global/metricTemplate' \
       --header "x-spinnaker-user:admin" \
       --header 'Content-Type: application/json' \
       --data-raw '{"filterKey":"${namespace_key},${container_key},${pod_key}","data":{"percent_diff_threshold":"hard","isNormalize":false,"groups":[{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"sum(rate(container_cpu_usage_seconds_total{namespace=\"${namespace_key}\", container=\"${container_key}\"}[1m]) * 1000)","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"CPU Usage By ContainerName"},{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"avg(container_memory_working_set_bytes{namespace=\"${namespace_key}\", container=\"${container_key}\"})","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"Memory workingset By Container Name Name"},{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"sum(rate(container_fs_reads_bytes_total{namespace=\"${namespace_key}\", container=\"${container_key}\"}[1m]))","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"filesysyem reads by Container"},{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"sum(rate(container_fs_writes_bytes_total{namespace=\"${namespace_key}\", container=\"${container_key}\"}[1m]))","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"filesystem writes by ContainerNMe"},{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"sum(rate(container_network_receive_bytes_total{namespace=\"${namespace_key}\", pod=~\"${pod_key}.*\"}[1m]))","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"Network  receiverd bytes byContainerName"},{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"sum(rate(container_network_transmit_bytes_total{namespace=\"${namespace_key}\", pod=~\"${pod_key}.*\"}[1m]))","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"Network transmitted bytes by ContainerName"}]},"templateName":"opsmx-metrictemplate","isEdit":true,"advancedProvider":"PROMETHEUS"}'
         ## End of datasources
         {{- else if .Values.global.enableCentralMonitoring }}
       ## Create prometheus datasource
       curl -s --location --request POST 'http://oes-platform:8095/platformservice/v6/datasource' \
       --header 'Content-Type: application/json' \
       --data-raw '{"datasourceType":"PROMETHEUS","name":"opsmx-prom","configurationFields":{"endPoint":"http://{{ .Release.Name }}-prometheus-server:80","username":"","password":""}}'
         sleep 10
       ## create metric template
       curl -s --location --request POST 'http://oes-autopilot:8090/autopilot/api/v5/global/metricTemplate' \
       --header "x-spinnaker-user:admin" \
       --header 'Content-Type: application/json' \
       --data-raw '{"filterKey":"${namespace_key},${container_key},${pod_key}","data":{"percent_diff_threshold":"hard","isNormalize":false,"groups":[{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"sum(rate(container_cpu_usage_seconds_total{namespace=\"${namespace_key}\", container=\"${container_key}\"}[1m]) * 1000)","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"CPU Usage By ContainerName"},{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"avg(container_memory_working_set_bytes{namespace=\"${namespace_key}\", container=\"${container_key}\"})","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"Memory workingset By Container Name Name"},{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"sum(rate(container_fs_reads_bytes_total{namespace=\"${namespace_key}\", container=\"${container_key}\"}[1m]))","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"filesysyem reads by Container"},{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"sum(rate(container_fs_writes_bytes_total{namespace=\"${namespace_key}\", container=\"${container_key}\"}[1m]))","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"filesystem writes by ContainerNMe"},{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"sum(rate(container_network_receive_bytes_total{namespace=\"${namespace_key}\", pod=~\"${pod_key}.*\"}[1m]))","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"Network  receiverd bytes byContainerName"},{"metrics":[{"metricType":"ADVANCED","metricWeight":1,"nanStrategy":"ReplaceWithZero","accountName":"opsmx-prom","riskDirection":"Higher","customThresholdHigher":70,"name":"sum(rate(container_network_transmit_bytes_total{namespace=\"${namespace_key}\", pod=~\"${pod_key}.*\"}[1m]))","criticality":"Normal","customThresholdLower":"10","watchlist":false}],"group":"Network transmitted bytes by ContainerName"}]},"templateName":"opsmx-metrictemplate","isEdit":true,"advancedProvider":"PROMETHEUS"}'
       {{- else if .Values.enableCentralLogging }}
       ## create Elasticsearch datasource
       curl -s --location --request POST 'http://oes-platform:8095/platformservice/v6/datasource' \
       --header 'Content-Type: application/json' \
       --data-raw '{"datasourceType":"ELASTICSEARCH","name":"opsmx-elastic","configurationFields":{"endPoint":"http://elasticsearch-master:9200","username":"","password":"","kibanaEndPoint":"","kibanaUsername":"","kibanaPassword":""}}'
         ## create LOG template
       curl -s --location --header "x-spinnaker-user:admin"  --request POST 'http://oes-autopilot:8090/autopilot/api/v5/global/logTemplate' \
       --header 'Content-Type: application/json' \
       --data-raw '{"templateName":"opsmx-logtemplate","monitoringProvider":"ELASTICSEARCH","scoringAlgorithm":"Canary","accountName":"opsmx-elasticsearch","index":"test_*","namespace":null,"regExFilter":false,"regExResponseKey":"","regularExpression":"","filterKey":"kubernetes.container_name","autoBaseline":false,"sensitivity":"high","tags":[],"errorTopics":[{"string":"OnOutOfMemoryError","topic":"CRITICAL","type":"default"},{"string":"StackOverflowError","topic":"CRITICAL","type":"default"},{"string":"ClassNotFoundException","topic":"CRITICAL","type":"default"},{"string":"FileNotFoundException","topic":"CRITICAL","type":"default"},{"string":"ArrayIndexOutOfBounds","topic":"CRITICAL","type":"default"},{"string":"NullPointerException","topic":"CRITICAL","type":"default"},{"string":"StringIndexOutOfBoundsException","topic":"CRITICAL","type":"default"},{"string":"FATAL","topic":"CRITICAL","type":"default"},{"string":"SEVERE","topic":"CRITICAL","type":"default"},{"string":"NoClassDefFoundError","topic":"ERROR","type":"default"},{"string":"NoSuchMethodFoundError","topic":"ERROR","type":"default"},{"string":"NumberFormatException","topic":"ERROR","type":"default"},{"string":"IllegalArgumentException","topic":"ERROR","type":"default"},{"string":"ParseException","topic":"ERROR","type":"default"},{"string":"SQLException","topic":"ERROR","type":"default"},{"string":"ArithmeticException","topic":"ERROR","type":"default"},{"string":"status=404","topic":"ERROR","type":"default"},{"string":"status=500","topic":"ERROR","type":"default"},{"string":"EXCEPTION","topic":"ERROR","type":"default"},{"string":"ERROR","topic":"ERROR","type":"default"},{"string":"WARN","topic":"WARN","type":"default"},{"string":"WARNING","topic":"WARN","type":"default"}],"responseKeywords":"log,message","logGroupName":"","logStreamName":"","region":"","verificationType":"VERIFICATION","testCaseKey":"","testSuiteKey":"","infoScoring":false,"contextualCluster":false,"contextualWindowSize":25,"tagEnabled":false,"streamId":"","timestampKey":"","applicationId":0,"applicationName":"","emailId":"","versionNo":"v1.0"}' > /dev/null
         {{- end }}

         ##Configure the Agent to the ISD
         #Create Agent in the ISD-UI via API
         sleep 20
         ### Controller Token Creation and Updation
         echo "Controller Token Creation and Updation"
         controllerhost=$(kubectl get pods | grep opsmx-controller | awk '{print $1}')
         ### Generation of Controller Token Creation
         kubectl -n {{ .Release.Namespace }} exec $controllerhost -- sh -c "./agent-controller -generate-control-tokens controller" > /tmp/controller.txt
         controllertoken=$(cat /tmp/controller.txt)
         ## Fetching the Carina and Sapor Secrets
         kubectl -n {{ .Release.Namespace }} get secret oes-carina-config -o jsonpath='{.data.*}' | base64 -d > /tmp/carina-manager.yaml
         kubectl -n {{ .Release.Namespace }} get secret oes-sapor-config -o jsonpath='{.data.*}' | base64 -d > /tmp/application.yml
         yq e -i '.controller.token = "'$controllertoken'"' /tmp/carina-manager.yaml
         kubectl -n {{ .Release.Namespace }} delete secret oes-carina-config
         kubectl -n {{ .Release.Namespace }} create secret generic oes-carina-config --from-file=/tmp/carina-manager.yaml
         yq e -i '.controller.token = "'$controllertoken'"' /tmp/application.yml
         kubectl -n {{ .Release.Namespace }} delete secret oes-sapor-config
         kubectl -n {{ .Release.Namespace }} create secret generic oes-sapor-config --from-file=/tmp/application.yml
         kubectl rollout restart deploy/oes-carina deploy/oes-sapor
         sleep 120
         echo "Creatng the Agent in ISD ..."
         curl -s --location --request POST 'http://oes-sapor:8085/oes/accountsConfig/v3/agents?cdType=Argo' --header 'Content-Type: application/json' --header 'x-spinnaker-user: admin'  --data-raw '{"agentName":"isd-argo-agent","description":"default isd-argo"}'
         sleep 20
         ## Download agent manifest file
         echo "Downloading the Agent from ISD ..."
         curl -s --location --request GET 'http://oes-sapor:8085/oes/accountsConfig/agents/isd-argo-agent/manifest' --header 'x-spinnaker-user: admin' > /tmp/manifest.yaml
         cd /tmp/
         ## Download and install the kubectl-slice to split to manifest file that is download
         wget -q https://github.com/patrickdappollonio/kubectl-slice/releases/download/v1.2.3/kubectl-slice_1.2.3_linux_x86_64.tar.gz
         tar -xvf /tmp/kubectl-slice_1.2.3_linux_x86_64.tar.gz > /dev/null
         cp /tmp/kubectl-slice /usr/local/bin/
         ## create a directory to place splited yamls from the manifest
         mkdir /tmp/yamls
         kubectl-slice -q --input-file=/tmp/manifest.yaml --output-dir=/tmp/yamls/.
         ## Replace the namespace in the manifest
         yq e -i '.subjects[0].namespace = "{{ .Release.Namespace }}"' /tmp/yamls/clusterrolebinding-opsmx-agent-isd-argo-agent.yaml
         ## Adding the agent service configmap with added arocd token
         sed -i 's/token: .*xxx/token: '$encodedtoken'/g' /tmp/agent-secret.yaml
         ## Replace the controller host name
         yq e '.data.configFile' /tmp/yamls/configmap-opsmx-agent-isd-argo-agent.yaml > /tmp/filter.yaml
         yq -i eval 'del(.data)' /tmp/yamls/configmap-opsmx-agent-isd-argo-agent.yaml
         sed --in-place "s|\"|'|g" /tmp/yamls/configmap-opsmx-agent-isd-argo-agent.yaml
         yq -i e '.controllerHostname = "agent-grpc:9001"' /tmp/filter.yaml
         configFile=$(cat /tmp/filter.yaml)
         yq eval ".data.\"configFile\" = \"$configFile\"" --inplace /tmp/yamls/configmap-opsmx-agent-isd-argo-agent.yaml
         ## Agent replicaset
         yq e -i '.spec.replicas = 1' /tmp/yamls/deployment-opsmx-agent-isd-argo-agent.yaml
         ## Apply the yamls
         echo "Applying the Agent files ..."
         kubectl replace --force -f /tmp/agent-secret.yaml
         kubectl apply -f /tmp/yamls/
         echo "------------------------------"
         echo "*** SECURITY ISSUE, please delete this pod after noting down the password ***"
         echo "------------------------------"
         echo "Username: admin"
         echo "Password: $argopassword"
         echo "------------------------------"
         break
         {{- end }}
      fi
      done
      break
    else
      if [ $wait_period -gt 2000 ];
      then
       echo "Script is timed out as the Argocd Server is not ready yet......."
       break
      else
       echo "Waiting for  Argocd Server to be ready"
       sleep 30
      fi
    fi
    done
{{- end }}
{{- end }}
